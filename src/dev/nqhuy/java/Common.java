package dev.nqhuy.java;/* * Created by Chang Bee on 6/2/2017. */import java.lang.reflect.Field;public class Common<T> {    /*Test Generic in Java*/    public <A> void unitTest(A x) {        if (x instanceof String) {            System.out.println("Là 1 Chuỗi: " + x);        } else {            System.out.println("Không phải là chuỗi");        }    }    public void displayInfo2(T object) {        try {            //Các trường các thộc tính private của Class Object            Field tt[] = object.getClass().getDeclaredFields();            //Duyệt các thuộc git inittính và lấy ra các giá trị của nó            for (Field field : tt) {                String fieldName = field.getName();// Tên Thuộc tính                //Lấy ra các field mà chúng ta có thể lấy                Field myField = object.getClass().getDeclaredField(fieldName);                //Cho phép truy cập vào thuộc tính đó                myField.setAccessible(true);                //Giá trị thuộc tính                System.out.print(fieldName + ": " + myField.get(object) + "\t");            }        } catch (NoSuchFieldException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } finally {            System.out.println();        }    }    /*    * Phương thức viết tổng quát dùng kỹ thuật reflection để lấy ra các giá trị của thuộc tính trong Object đó    *    * */    public static void displayInfo(Object object) {        try {            //Các trường các thộc tính private của Class Object            Field tt[] = object.getClass().getDeclaredFields();            //Duyệt các thuộc tính và lấy ra các giá trị của nó            for (Field field : tt) {                String fieldName = field.getName();// Tên Thuộc tính                //Lấy ra các field mà chúng ta có thể lấy                Field myField = object.getClass().getDeclaredField(fieldName);                //Cho phép truy cập vào thuộc tính đó                myField.setAccessible(true);                //Giá trị thuộc tính                System.out.print(fieldName + ": " + myField.get(object) + "\t");            }        } catch (NoSuchFieldException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } finally {            System.out.println();        }    }    /*    * Không phụ thuộc vào object có bao nhiêu thuộc tính    * hay là kiêu dữ liệu là gì    * */    public static void copyObject(Object src, Object dst) {        // Bước 1: lấy các thuộc tính của nguồn: Tên và giá trị        try {            Field ttSRC[] = src.getClass().getDeclaredFields();            for (Field fieldSRC : ttSRC) {                String fieldName = fieldSRC.getName(); // Tên Thuộc tính                // Thuộc tính của nguồn từ name                Field fSRC = src.getClass().getDeclaredField(fieldName);                fSRC.setAccessible(true);                // Thuộc tính của đích theo tt nguồn                Field fDST = dst.getClass().getDeclaredField(fieldName);                fDST.setAccessible(true);                if (fDST != null) {                    // Thuộc tính nguồn giống thuộc tính đích                    // tức là 2 object có chung 1 class hay chung 1 Object chuyền đến                    fDST.set(dst, fSRC.get(src));                }            }        } catch (NoSuchFieldException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        }    }}